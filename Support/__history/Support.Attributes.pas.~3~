unit Support.Attributes;

interface
uses
  System.StrUtils;

type
  TableAttribute = class(TCustomAttribute)
  private
    FTableName : string;
    FSchemaName : string;
    FDBName : string;
    function GetFullName : string;
  public
    constructor Create(const ATableName: string; const ASchemaName: string = '');

    property TableName: string read FTableName;
    property Schema: string read FSchemaName;
    property FullName: string read GetFullName;
    property DBName: string read FDBName write FDBName;
  end;

  TColProp = (
    cpPrimaryKey,
    cpRequired,
    cpUnique,
    cpNotNull,
    cpAutoGenerated
  );
  TColProps = set of TColProp;
  ColumnAttribute = class(TCustomAttribute)
  private
    FColumnName : string;
    FLength: Integer;
    FPrecision: Integer;
    FScale: Integer;
    FColProps : TColProps;
    function GetIsPrimaryKey : Boolean;
    function GetIsAutoGenerated : Boolean;
  public
    constructor Create(const AColumnName : string) overload;
    constructor Create(const AColumnName : string; AColProps : TColProps;
                       ALength : Integer=0;
                       APrecision : Integer=0;
                       AScale : Integer=0); overload;
    constructor Create(AColProps : TColProps;
                       ALength : Integer=0;
                       APrecision : Integer=0;
                       AScale : Integer=0); overload;
    property ColumnName: string read FColumnName write FColumnName;
    property Length: Integer read FLength write FLength;
    property Precision: Integer read FPrecision write FPrecision;
    property Scale: Integer read FScale write FScale;
    property ColProps: TColProps read FColProps write FColProps;
    property IsPrimaryKey: Boolean read GetIsPrimaryKey;
    property IsAutoGenerated: Boolean read GetIsAutoGenerated;
  end;

implementation

{ ColumnAttribute }

constructor ColumnAttribute.Create(const AColumnName: string);
begin
  Create(AColumnName, []);
end;

constructor ColumnAttribute.Create(const AColumnName: string;
  AColProps: TColProps; ALength, APrecision, AScale: Integer);
begin
  inherited Create;
  FColumnName := AColumnName;
  FColProps := AColProps;
  FLength := ALength;
  FPrecision := APrecision;
  FScale := AScale;
end;

constructor ColumnAttribute.Create(AColProps: TColProps; ALength, APrecision,
  AScale: Integer);
begin
  inherited Create;
  FColumnName := '';
  FColProps := AColProps;
  FLength := ALength;
  FPrecision := APrecision;
  FScale := AScale;
end;

function ColumnAttribute.GetIsAutoGenerated: Boolean;
begin
  Result := cpAutoGenerated in FColProps;
end;

function ColumnAttribute.GetIsPrimaryKey: Boolean;
begin
  Result := cpPrimaryKey in FColProps;
end;

{ EntityAttribute }

constructor TableAttribute.Create(const ATableName, ASchemaName: string);
begin
  inherited Create;
  FTableName := ATableName;
  FSchemaName := ASchemaName;
  FDBName := ADBName;
end;

function TableAttribute.GetFullName: string;
begin
  Result := IfThen(FSchemaName='', FTableName, FSchemaName +'.'+FTableName);
end;

end.
